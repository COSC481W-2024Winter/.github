import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'email_sorting_runner_test.mocks.dart'; // This file is generated by running build_runner
import 'package:jarvis/backend/email_fetch_service.dart';
import 'package:jarvis/backend/email_gmail_class.dart';
import 'package:jarvis/backend/email_sort_service.dart';
import 'package:jarvis/backend/email_sorting_runner.dart';

// Generate mocks using Mockito code generation
@GenerateMocks([EmailFetchingService, EmailSorter])
void main() {
  late MockEmailFetchingService mockEmailFetchingService;
  late MockEmailSorter mockEmailSorter;
  late EmailSortingRunner emailSortingRunner;

  setUp(() {
    mockEmailFetchingService = MockEmailFetchingService();
    mockEmailSorter = MockEmailSorter();
    emailSortingRunner = EmailSortingRunner(
      emailFetchingService: mockEmailFetchingService,
      emailSorter: mockEmailSorter,
    );
  });

  test('sortEmails successfully sorts emails', () async {
    // Example email data
    final List<EmailMessage> mockFetchedEmails = [
      EmailMessage(id: '1', subject: 'Subject 1', body: 'Body 1', category: 'Category 1'),
      EmailMessage(id: '2', subject: 'Subject 2', body: 'Body 2', category: 'Category 2'),
    ];

    when(mockEmailFetchingService.fetchEmails(any, any))
        .thenAnswer((_) async => mockFetchedEmails);

    when(mockEmailSorter.categorizeEmailsList(any))
        .thenAnswer((_) async => [
              {"Subject": "Subject 1", "Body": "Body 1", "Category": "Category 1"},
              {"Subject": "Subject 2", "Body": "Body 2", "Category": "Category 2"},
            ]);

    final sortedEmails = await emailSortingRunner.sortEmails("dummyAccessToken", 10);

    // Verify the results
    expect(sortedEmails, isA<List<EmailMessage>>());
    expect(sortedEmails.length, equals(2));
    expect(sortedEmails[0].category, equals("Category 1"));
    expect(sortedEmails[1].category, equals("Category 2"));

    // Verify the method was called
    verify(mockEmailFetchingService.fetchEmails(any, any)).called(1);
    verify(mockEmailSorter.categorizeEmailsList(any)).called(1);
  });
}
